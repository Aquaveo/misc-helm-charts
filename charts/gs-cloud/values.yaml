common-image-stuff: &common-image-stuff
  tag: '2.27.2.0'

# TODO: Need to add the jndi datasource
jndi:
  enabled: false
  name: gs-cloud-cm-jndi-geodata
  datasource:
    name: gs-cloud-cm-jndi-geodata
    enabled: true
    wait_for_it: true
    wait_timeout: 10
    pool:
      max_size: 10
      min_idle: 2
      connection_timeout: 250
      idle_timeout: 60000

# if you watn to use acl please set enabled to true on the acl section
acl:
# The default values run the pgconfig backend with ACL rules, please refer to the data
  enabled: false
  secret_name: gs-cloud-acl-config
  secrets:
    acl_username: Z2Vvc2VydmVy # geoserver
    acl_password: czNjcjN0 # s3cr3t
    acl_db_username: cG9zdGdyZXM= # postgres
    acl_db_password: ZzMwczNydjNy # g30s3rv3r
    acl_users_admin_password: e25vb3B9czNjcjN0 # {noop}s3cr3t
    acl_users_geoserver_password: e25vb3B9czNjcjN0 # {noop}s3cr3t

storageClass: &storage-class-common-values
  provisioner: ''
  enabled: false #If true, it will make the gs-cloud to create it's own storageclass
  storageClassName: ''
  annotations: {}
  reclaimPolicy: ''
  volumeBindingMode: ''
  allowVolumeExpansion: true
  parameters: {}

persistentvalues: &pv-pvc-common-values
  storage: 1Gi
  accessModes: 'ReadWriteOnce'
  persistentVolumeReclaimPolicy: 'Retain'

persistent:
  config:
    pvname: gs-cloud-datadir-nfs
    pvcname: gs-cloud-datadir-nfs-claim
    mountOptions: 'nfsvers=4.2'
    pvcreation: false  #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values

  cache:
    pvname: gs-cloud-gwc-cache-nfs
    pvcname: gs-cloud-gwc-cache-nfs-claim
    pvcreation: false #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values

postgresql:
  enabled: false
  image:
    debug: true
  global:
    postgresql:
      auth:
        # this should be replaced by your existing secret
        # existingSecret: your-secret-name
        postgresPassword: g30s3rv3r
        ## If using a different username, db and password if not, using default postgres user and db
        # username: "admin"
        # password: "pass"
        # database: "oscloud"
  fullnameOverride: 'gs-cloud-psql'

  primary:
    initdb:
      # scriptsConfigMap: init-pqsl-db
      scriptsConfigMap: init-db
    
  containerPorts:
    postgresql: 5432

rabbitmq:
  fullnameOverride: gs-cloud-rabbitmq
  enabled: true
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 512Mi

  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.9.13-debian-10-r14

  auth:
    username: geoserver
    password: password
    erlangCookie: cookie

  persistence:
    enabled: false

resources: &common-resources
  requests:
    memory: 2Gi
    cpu: 0.1
  limits:
    memory: 2Gi

additionalVolumes: &additional-volumes
  datadir:
    persistentVolumeClaim:
      claimName: gs-cloud-datadir-nfs-claim
  cache:
    persistentVolumeClaim:
      claimName: gs-cloud-gwc-cache-nfs-claim   

additionalVolumeMounts: &additional-volume-mounts
  /opt/app/data_directory:
    name: 'datadir'
  /mnt/cache:
    name: 'cache'

env: &env-override
  RABBITMQ_HOST:
    value: 'gs-cloud-rabbitmq'
  RABBITMQ_USER:
    value: 'geoserver'
  #This secrets gets created by the RABBITMQ chart
  RABBITMQ_PASSWORD:
    type: secret
    name: 'gs-cloud-rabbitmq'
    key: 'rabbitmq-password'
  GEOWEBCACHE_CACHE_DIR:
    value: '/mnt/cache'
  SPRING_PROFILES_ACTIVE:
    value: standalone,datadir
  JAVA_OPTS_DEFAULT:
    value: '-DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80'    
  JAVA_OPTS:
    value: '$(JAVA_OPTS_DEFAULT) -XshowSettings:system'
  GEOSERVER_ADMIN_USERNAME:
    value: admin
  GEOSERVER_ADMIN_PASSWORD:
    value: geoserver
  GEOSERVER_BASE_PATH:
    value: /geoserver


horizontal-pod-autoscaler: &horizontal-pod-autoscaler
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70

live_probeness: &liveness-probeness
  failureThreshold: 10
  httpGet:
    path: /actuator/health/liveness
    port: health
  initialDelaySeconds: 30
  periodSeconds: 10

readiness_probeness: &readiness-probeness
  httpGet:
    path: /actuator/health/readiness
    port: health
  periodSeconds: 5

additional-configuration: &additional-configuration
  volumes:
    <<: *additional-volumes
  containers:
    spring:
      resources:
        <<: *common-resources
      env:
        <<: *env-override
      volumeMounts:
        <<: *additional-volume-mounts
      livenessProbe:
        <<: *liveness-probeness
      readinessProbe:
        <<: *readiness-probeness
      image:
        <<: *common-image-stuff
        sha: ''        

service: &common-service-definition
  type: ClusterIP
  servicePort: 8080
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http


geoservercloud:
  global:
    profile: standalone,datadir
    image:
      pullPolicy: IfNotPresent    
  geoserver:
    ingress:
      enabled: true
      annotations: {}
      hostGroups:
        host1:
          tls:
            enabled: false
          hosts:
            - localhost
    services:
      gateway:
        replicaCount: 1
        <<: *additional-configuration
        service:
          annotations: {}
          labels: {}
          <<: *common-service-definition
          
        ingress:
          enabled: true
      webui:
        replicaCount: 1
        <<: *additional-configuration
        service:
          <<: *common-service-definition
      rest:
        replicaCount: 1
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler        
        service:
          <<: *common-service-definition
      wms:
        replicaCount: 1
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler
        service:
          <<: *common-service-definition

      wcs:
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler
        service:
          <<: *common-service-definition

      wfs:
        replicaCount: 1
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler
        service:
          <<: *common-service-definition

      gwc:
        replicaCount: 1
        <<: *additional-configuration
        service:
          <<: *common-service-definition
        hpa:
          <<: *horizontal-pod-autoscaler          

      wps:
        replicaCount: 1
        <<: *additional-configuration

      acl:
        enabled: false

pgcat:
  enabled: false