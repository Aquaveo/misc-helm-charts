jndi:
  enabled: false
  name: gs-cloud-cm-jndi-geodata
  datasource:
    name: gs-cloud-cm-jndi-geodata
    enabled: true
    wait_for_it: true
    wait_timeout: 10
    pool:
      max_size: 10
      min_idle: 2
      connection_timeout: 250
      idle_timeout: 60000

# if you watn to use acl please set enabled to true on the acl section
acl:
# The default values run the pgconfig backend with ACL rules, please refer to the data
  enabled: false
  secrets:
    acl_username: Z2Vvc2VydmVy # geoserver
    acl_password: czNjcjN0 # s3cr3t
    acl_db_username: cG9zdGdyZXM= # postgres
    acl_db_password: ZzMwczNydjNy # g30s3rv3r
    acl_users_admin_password: e25vb3B9czNjcjN0 # {noop}s3cr3t
    acl_users_geoserver_password: e25vb3B9czNjcjN0 # {noop}s3cr3t

storageClass: &storage-class-common-values
  provisioner: ''
  enabled: false #If true, it will make the gs-cloud to create it's own storageclass
  storageClassName: ''
  annotations: {}
  reclaimPolicy: ''
  volumeBindingMode: ''
  allowVolumeExpansion: true
  parameters: {}

persistentvalues: &pv-pvc-common-values
  storage: 1Gi
  accessModes: 'ReadWriteOnce'
  persistentVolumeReclaimPolicy: 'Retain'

persistent:
  enabled: true
  raster:
    pvname: gs-cloud-raster-nfs
    pvcname: gs-cloud-raster-nfs-claim
    pvcreation: false #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values

  cache:
    pvname: gs-cloud-gwc-cache-nfs
    pvcname: gs-cloud-gwc-cache-nfs-claim
    pvcreation: false #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values

postgresql:
  enabled: false
  image:
    debug: true
  global:
    postgresql:
      auth:
        # this should be replaced by your existing secret
        # existingSecret: your-secret-name
        postgresPassword: g30s3rv3r
        ## If using a different username, db and password if not, using default postgres user and db
        # username: "admin"
        # password: "pass"
        # database: "oscloud"
  fullnameOverride: 'gs-cloud-psql'

  primary:
    initdb:
      # scriptsConfigMap: init-pqsl-db
      scriptsConfigMap: init-db
    
  containerPorts:
    postgresql: 5432

rabbitmq:
  enabled: true
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 512Mi

  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.9.13-debian-10-r14

  auth:
    username: geoserver
    password: password
    erlangCookie: cookie

  persistence:
    enabled: false

resources: &common-resources
  requests:
    memory: 2Gi
    cpu: 0.1
  limits:
    memory: 2Gi
    cpu: 2.0

additionalVolumes: &additional-volumes
  cache:
    emptyDir: {}
    # persistentVolumeClaim:
    #   claimName: gs-cloud-gwc-cache-nfs-claim

additionalVolumeMounts: &additional-volume-mounts
  /mnt/cache:
    name: 'cache'
  
env: &env-override
  RABBITMQ_HOST:
    value: 'gs-cloud-rabbitmq'
  RABBITMQ_USER:
    value: 'geoserver'
  #This secrets gets created by the RABBITMQ chart
  RABBITMQ_PASSWORD:
    type: secret
    name: 'gs-cloud-rabbitmq'
    key: 'rabbitmq-password'
  GEOWEBCACHE_CACHE_DIR:
    value: '/mnt/cache'
  SPRING_PROFILES_ACTIVE:
    value: standalone,pgconfig
  JAVA_OPTS:
    value: '$(JAVA_OPTS_DEFAULT) -XshowSettings:system'

  GEOSERVER_ADMIN_USERNAME:
    value: admin
  GEOSERVER_ADMIN_PASSWORD:
    value: geoserver
  GEOSERVER_BASE_PATH:
    value: /geoserver

    
  # ACL_USERNAME:
  #   type: secret
  #   name: 'gs-cloud-psql-acl-acl-config'
  #   key: 'acl-username'
  # ACL_PASSWORD:
  #   type: secret
  #   name: 'gs-cloud-psql-acl-acl-config'
  #   key: 'acl-password'

  # # Uncomment if you want to use pgconfig backend
  # PG_PASSWORD:
  #   type: secret
  #   name: 'gs-cloud-psql'
  #   key: 'postgres-password'  
  # PGCONFIG_HOST:
  #   value: gs-cloud-psql-hl
  # PGCONFIG_PORT:
  #   value: '5432'
  # PGCONFIG_DATABASE:
  #   value: postgres
  # PGCONFIG_SCHEMA:
  #   value: pgconfig
  # PGCONFIG_USERNAME:
  #   value: postgres
  # PGCONFIG_PASSWORD:
  #   type: secret
  #   name: 'gs-cloud-psql'
  #   key: 'postgres-password'
  # PGCONFIG_MAXCONNECTIONS:
  #   value: '10'

horizontal-pod-autoscaler: &horizontal-pod-autoscaler
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70

live_probeness: &liveness-probeness
  failureThreshold: 10
  httpGet:
    path: /actuator/health/liveness
    port: health
  initialDelaySeconds: 30
  periodSeconds: 10

readiness_probeness: &readiness-probeness
  httpGet:
    path: /actuator/health/readiness
    port: health
  periodSeconds: 5

additional-configuration: &additional-configuration
  volumes:
    <<: *additional-volumes
  containers:
    spring:
      resources:
        <<: *common-resources
      env:
        <<: *env-override
      volumeMounts:
        <<: *additional-volume-mounts
      livenessProbe:
        <<: *liveness-probeness
      readinessProbe:
        <<: *readiness-probeness

geoservercloud:
  global:
    # profile: standalone,pgconfig
    profile: standalone,datadir
    image:
      pullPolicy: IfNotPresent    
  geoserver:
    ingress:
      enabled: true
      annotations: {}
      hostGroups:
        host1:
          tls:
            enabled: false
          hosts:
            - gscloud.local
    services:
      gateway:
        replicaCount: 1
        <<: *additional-configuration
        service:
          annotations: {}
          labels: {}
        ingress:
          enabled: true
      webui:
        replicaCount: 1
        <<: *additional-configuration

      rest:
        replicaCount: 1
        <<: *additional-configuration

      wms:
        replicaCount: 1
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler

      wcs:
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler
      wfs:
        replicaCount: 1
        <<: *additional-configuration
        hpa:
          <<: *horizontal-pod-autoscaler
      gwc:
        replicaCount: 1
        <<: *additional-configuration

      wps:
        replicaCount: 1
        <<: *additional-configuration
      # # if acl needs to be used uncomment the acl section
      # acl:
      #   enabled: true
      #   replicaCount: 1
      #   containers:
      #     spring:
      #       env:
      #         SPRING_PROFILES_ACTIVE:
      #           value: standalone,pgconfig,acl
      #         GEOSERVER_BUS_ENABLED:
      #           value: 'true'
      #         RABBITMQ_HOST:
      #           value: 'gs-cloud-rabbitmq'
      #         RABBITMQ_PORT:
      #           value: '5672'
      #         RABBITMQ_USER:
      #           value: 'geoserver'
      #         RABBITMQ_PASSWORD:
      #           type: secret
      #           name: 'gs-cloud-rabbitmq'
      #           key: 'rabbitmq-password'
      #         # these username and password should
      #         # match those defined for postgres chart
      #         # (or share single existing secret)
      #         PG_USERNAME:
      #           type: secret
      #           name: 'gs-cloud-psql-acl-acl-config'
      #           key: 'acl-db-username'
      #         PG_PASSWORD:
      #           type: secret
      #           name: 'gs-cloud-psql-acl-acl-config'
      #           key: 'acl-db-password'
      #         PG_HOST:
      #           value: 'gs-cloud-psql-hl'
      #         PG_PORT:
      #           value: '5432'
      #         PG_DB:
      #           value: 'postgres'
      #         PG_SCHEMA:
      #           value: 'acl'
      #         ACL_USERS_ADMIN_PASSWORD:
      #           type: secret
      #           name: 'gs-cloud-psql-acl-acl-config'
      #           key: 'acl-users-admin-password'
      #         ACL_USERS_GEOSERVER_PASSWORD:
      #           type: secret
      #           name: 'gs-cloud-psql-acl-acl-config'
      #           key: 'acl-users-geoserver-password'


pgcat:
  enabled: false # by default pgcat is disabled, because we need to sue pgconfig as the backend

  replicaCount: 1
  # Example: If your chart sets up RBAC
  serviceAccount:
    create: false

  configuration:
    general:
      host: "0.0.0.0"
      port: 6432
      enable_prometheus_exporter: false
      prometheus_exporter_port: 9930

      # A minimal set of recommended timeouts
      connect_timeout: 5000
      idle_timeout: 30000
      healthcheck_timeout: 1000
      healthcheck_delay: 30000
      shutdown_timeout: 60000

      # This admin_username/password is needed for the virtual "pgcat" or "pgbouncer" admin database
      admin_username: "postgres"
      admin_password: "postgres"

    pools:
      # # SHOULD THE ACL ALSO USE THE PGCAT? 
      # 1) For the ACL database
      # - name: "acl"
      #   pool_mode: "transaction"
      #   users:
      #     - username:
      #         type: secret
      #         name: 'gs-cloud-psql-acl-acl-config'
      #         key: 'acl-db-username'
      #       password:
      #         type: secret
      #         name: 'gs-cloud-psql-acl-acl-config'
      #         key: 'acl-db-password'
      #       pool_size: 20
      #   shards:
      #     - servers:
      #         - host: gs-cloud-psql-hl
      #           port: 5432
      #           role: primary
      #       database: "acl"

      # #  THIS NEEDS TO BE  UNCOMENTED IF PGCONFIG USED.
      # 2) For the pgconfig database
      - name: "pgconfig"
        pool_mode: "transaction"
        users:
          - username: "postgres"
            password: "g30s3rv3r"
            pool_size: 20
        shards:
          - servers:
              - host: gs-cloud-psql-hl
                port: 5432
                role: primary
            database: "postgres"
