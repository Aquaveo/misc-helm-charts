# The default values run the pgconfig backend with ACL rules, please refer to the data
acl:
  enabled: true
  secrets:
    acl_username: Z2Vvc2VydmVy # geoserver
    acl_password: czNjcjN0 # s3cr3t
    acl_db_username: cG9zdGdyZXM= # postgres
    acl_db_password: ZzMwczNydjNy # g30s3rv3r
    acl_users_admin_password: e25vb3B9czNjcjN0 # {noop}s3cr3t
    acl_users_geoserver_password: e25vb3B9czNjcjN0 # {noop}s3cr3t

storageClass: &storage-class-common-values
  provisioner: ''
  enabled: false #If true, it will make the gs-cloud to create it's own storageclass
  storageClassName: ''
  annotations: {}
  reclaimPolicy: ''
  volumeBindingMode: ''
  allowVolumeExpansion: true
  parameters: {}

persistentvalues: &pv-pvc-common-values
  storage: 1Gi
  accessModes: 'ReadWriteOnce'
  persistentVolumeReclaimPolicy: 'Retain'

persistent:
  raster:
    pvname: gs-cloud-raster-nfs
    pvcname: gs-cloud-raster-nfs-claim
    pvcreation: false #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values

  config:
    pvname: gs-cloud-datadir-nfs
    pvcname: gs-cloud-datadir-nfs-claim
    mountOptions: 'nfsvers=4.2'
    pvcreation: false  #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values
  cache:
    pvname: gs-cloud-gwc-cache-nfs
    pvcname: gs-cloud-gwc-cache-nfs-claim
    pvcreation: false #When false, the pvc will create the pv, but if you enable it, then the pv will be created manually using the pv.yaml
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: 
      - *pv-pvc-common-values
      - *storage-class-common-values


# using default values, if you change any value please also change it on the @postgresql subcahrt
# postgres_db_values: &postgres-db-values
#   database: postgres
#   username: postgres
#   password: g30s3rv3r


jndi:
  enabled: false
  name: gs-cloud-cm-jndi-geodata
  datasource:
    name: gs-cloud-cm-jndi-geodata
    enabled: true
    # host: gs-cloud-psql-hl
    wait_for_it: true
    wait_timeout: 10
    # port: 5432
    # <<: *postgres-db-values
    pool:
      max_size: 10
      min_idle: 2
      connection_timeout: 250
      idle_timeout: 60000


# postgresql_init:
#   name: init-pqsl-db
#   <<: *postgres-db-values

postgresql:
  enabled: true
  image:
    debug: true
  global:
    postgresql:
      auth:
        # this should be replaced by your existing secret
        # existingSecret: your-secret-name
        postgresPassword: g30s3rv3r
        ## If using a different username, db and password if not, using default postgres user and db
        # username: "admin"
        # password: "pass"
        # database: "oscloud"
  fullnameOverride: 'gs-cloud-psql'

  primary:
    initdb:
      # scriptsConfigMap: init-pqsl-db
      scriptsConfigMap: init-db
    
  containerPorts:
    postgresql: 5432

rabbitmq:
  enabled: true
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 512Mi

  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.9.13-debian-10-r14

  auth:
    username: geoserver
    password: password
    erlangCookie: cookie

  persistence:
    enabled: false

resources: &common-resources
  requests:
    memory: 512Mi
    cpu: 0.1
  limits:
    memory: 4Gi
    cpu: 4.0

additionalVolumes: &additional-volumes
  datadir:
    persistentVolumeClaim:
      claimName: gs-cloud-datadir-nfs-claim
  cache:
    persistentVolumeClaim:
      claimName: gs-cloud-gwc-cache-nfs-claim
  # # configmap for pgconfig JNDI configuration
  # geoserver-pgconfig-config:
  #   configMap:
  #     name: geoserver-pgconfig-cm
      
  # geodata:
  #   configMap:
  #     name: gs-cloud-cm-jndi-geodata

additionalVolumeMounts: &additional-volume-mounts
  /opt/app/data_directory:
    name: 'datadir'
  /mnt/cache:
    name: 'cache'
  # /custom/geodata:
  #   name: 'geodata'
  #   readOnly: true

  # /etc/gscloud-custom:
  #   name: 'geoserver-pgconfig-config'

env: &env-override
  PG_PASSWORD:
    type: secret
    name: 'gs-cloud-psql'
    key: 'postgres-password'
  SPRING_PROFILES_ACTIVE:
    value: standalone,pgconfig,acl
  # SPRING_CONFIG_ADDITIONAL_LOCATION:
  #   value: 'optional:file:/etc/gscloud-custom/pgconfig-jndi.yml'    
  JAVA_OPTS:
    value: '$(JAVA_OPTS_DEFAULT) -XshowSettings:system'
  ACL_USERNAME:
    type: secret
    name: 'gs-cloud-pgconfig-acl-acl-config'
    key: 'acl-username'
  ACL_PASSWORD:
    type: secret
    name: 'gs-cloud-pgconfig-acl-acl-config'
    key: 'acl-password'
  PGCONFIG_HOST:
    value: gs-cloud-psql-hl
  PGCONFIG_PORT:
    value: '5432'
  PGCONFIG_DATABASE:
    value: postgres
  PGCONFIG_SCHEMA:
    value: pgconfig
  PGCONFIG_USERNAME:
    value: postgres
  PGCONFIG_PASSWORD:
    type: secret
    name: 'gs-cloud-psql'
    key: 'postgres-password'
  PGCONFIG_MAXCONNECTIONS:
    value: '10'
  RABBITMQ_HOST:
    value: 'gs-cloud-rabbitmq'
  RABBITMQ_USER:
    value: 'geoserver'
  #This secrets gets created by the RABBITMQ chart
  RABBITMQ_PASSWORD:
    type: secret
    name: 'gs-cloud-rabbitmq'
    key: 'rabbitmq-password'
  GEOWEBCACHE_CACHE_DIR:
    value: '/mnt/cache'



  # JAVA_OPTS_DEFAULT:
  #   value: '-DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80'
  # JAVA_OPTS:
  #   value: '$(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml'
  #   order: 1
  # SPRING_PROFILES_ACTIVE:
  #   value: standalone,datadir

# live_probeness: &liveness-probeness
#   failureThreshold: 10
#   httpGet:
#     path: /actuator/health/liveness
#     port: health
#   initialDelaySeconds: 30
#   periodSeconds: 10

# readiness_probeness: &readiness-probeness
#   httpGet:
#     path: /actuator/health/readiness
#     port: health
#   periodSeconds: 5

# This is used, so the geoserver services can wait for the postgresql to start
# additional_init_containers: &additional-init-containers
#   waitpostgresdb:
#     image:
#       repository: postgis/postgis
#       tag: latest
#     env:
#       PGHOST:
#         value: gs-cloud-psql
#       PGUSER:
#         value: username
#       PGPASSWORD:
#         value: password
#       PGDATABASE:
#         value: ogscloud
#     command:
#       - /bin/sh
#       - -c
#       - |
#         while ! psql -c 'select 1' > /dev/null 2>&1; do
#           echo "waiting for postgresql database to be ready"
#           sleep 1
#         done
#         echo "postgresql database is ready!"

additional-stuff: &additional-stuff
  volumes:
    <<: *additional-volumes

  containers:
    spring:
      resources:
        <<: *common-resources
      env:
        <<: *env-override
      volumeMounts:
        <<: *additional-volume-mounts
      # livenessProbe:
      #   <<: *liveness-probeness
      # readinessProbe:
      #   <<: *readiness-probeness

service: &common-service-definition
  type: ClusterIP
  servicePort: 8080
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http

geoservercloud:
  global:
    # profile: standalone,datadir
    profile: standalone,pgconfig,acl
  geoserver:
    ingress:
      annotations: {}
      enabled: true
      hostGroups:
        host1:
          tls:
            enabled: false
          hosts:
            - localhost
    services:
      gateway:
        <<: *additional-stuff
        service:
          annotations: {}
          labels: {}
          <<: *common-service-definition
        ingress:
          enabled: true
      webui:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers
      rest:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers
      wms:
        replicaCount: 1
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers
      wcs:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers
      wfs:
        replicaCount: 1
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers
      gwc:
        replicaCount: 1
        <<: *additional-stuff
        service:
          <<: *common-service-definition
        # initContainers:
        #   <<: *additional-init-containers

      acl:
        enabled: true
        replicaCount: 1
        service:
          <<: *common-service-definition
        containers:
          spring:
            env:
              SPRING_PROFILES_ACTIVE:
                value: standalone,pgconfig,acl
              GEOSERVER_BUS_ENABLED:
                value: 'true'
              RABBITMQ_HOST:
                value: 'gs-cloud-rabbitmq'
              RABBITMQ_PORT:
                value: '5672'
              RABBITMQ_USER:
                value: 'geoserver'
              RABBITMQ_PASSWORD:
                type: secret
                name: 'gs-cloud-rabbitmq'
                key: 'rabbitmq-password'
              # these username and password should
              # match those defined for postgres chart
              # (or share single existing secret)
              PG_USERNAME:
                type: secret
                name: 'gs-cloud-pgconfig-acl-acl-config'
                key: 'acl-db-username'
              PG_PASSWORD:
                type: secret
                name: 'gs-cloud-pgconfig-acl-acl-config'
                key: 'acl-db-password'
              PG_HOST:
                value: 'gs-cloud-psql-hl'
              PG_PORT:
                value: '5432'
              PG_DB:
                value: 'postgres'
              PG_SCHEMA:
                value: 'acl'
              ACL_USERS_ADMIN_PASSWORD:
                type: secret
                name: 'gs-cloud-pgconfig-acl-acl-config'
                key: 'acl-users-admin-password'
              ACL_USERS_GEOSERVER_PASSWORD:
                type: secret
                name: 'gs-cloud-pgconfig-acl-acl-config'
                key: 'acl-users-geoserver-password'