persistentvalues: &pv-pvc-common-values
  storage: 1Gi
  storageClass:
    enabled: true
    storageClassName: ''
  accessModes: 'ReadWriteOnce'
  persistentVolumeReclaimPolicy: 'Retain'

persistent:
  raster:
    pvname: gs-cloud-raster-nfs
    pvcname: gs-cloud-raster-nfs-claim
    pvcreation: true
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: *pv-pvc-common-values
  config:
    pvname: gs-cloud-datadir-nfs
    pvcname: gs-cloud-datadir-nfs-claim
    mountOptions: 'nfsvers=4.2'
    pvcreation: true
    path: ''
    nfsserver: '' #This is a nfs server
    <<: *pv-pvc-common-values

  cache:
    pvname: gs-cloud-gwc-cache-nfs
    pvcname: gs-cloud-gwc-cache-nfs-claim
    pvcreation: true
    path: ''
    mountOptions: 'nfsvers=4.2'
    nfsserver: '' #This is a nfs server
    <<: *pv-pvc-common-values

postgres_db_values: &postgres-db-values
  database: ogscloud
  username: username
  password: password

configMaps:
  jndi:
    enabled: true
    name: gs-cloud-cm-jndi-geodata
    datasource:
      name: geodata
      enabled: true
      host: psql-dep
      wait_for_it: true
      wait_timeout: 10
      port: 5432
      <<: *postgres-db-values
      pool:
        max_size: 10
        min_idle: 2
        connection_timeout: 250
        idle_timeout: 60000
  postgresql_init:
    name: init-pqsl-db
    host: psql-dep
    wait_for_it: true
    wait_timeout: 10
    port: 5432
    <<: *postgres-db-values

postgresql:
  image:
    debug: true
  auth:
    postgresPassword: 'password'
  fullnameOverride: 'psql-dep'

  primary:
    initdb:
      configMap: init-pqsl-db
  #     scripts:
  #       00_data_init.sql: |
  #         CREATE DATABASE ogscloud;
  #         CREATE ROLE username WITH LOGIN PASSWORD 'password';
  #         ALTER DATABASE ogscloud OWNER TO username ;
  #         \c ogscloud
  #         CREATE EXTENSION postgis;
  #         CREATE SCHEMA data;
  #         CREATE SCHEMA config;

# postgis:
#   image:
#     pullPolicy: 'IfNotPresent'
#   storageClass:
#     storageClassName: 'postgresql-efs'
#   fullnameOverride: 'psql-dep'
#   postgres_user: 'postgres'
#   postgres_password: 'password'

rabbitmq:
  enabled: true
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 512Mi

  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.9.13-debian-10-r14

  auth:
    username: geoserver
    password: password
    erlangCookie: cookie

  persistence:
    enabled: false
additionalVolumes: &additional-volumes
  datadir:
    persistentVolumeClaim:
      claimName: gs-cloud-datadir-nfs-claim
  cache:
    persistentVolumeClaim:
      claimName: gs-cloud-gwc-cache-nfs-claim
  geodata:
    configMap:
      name: gs-cloud-cm-jndi-geodata

additionalVolumeMounts: &additional-volume-mounts
  /opt/app/data_directory:
    name: 'datadir'
  /mnt/cache:
    name: 'cache'
  /custom/geodata:
    name: 'geodata'
    readOnly: true

env: &env-override
  RABBITMQ_HOST:
    value: 'gs-cloud-rabbitmq'
  RABBITMQ_USER:
    value: 'geoserver'
  RABBITMQ_PASSWORD:
    type: secret
    name: 'gs-cloud-rabbitmq'
    key: 'rabbitmq-password'
  SPRING_PROFILES_ACTIVE:
    value: standalone,datadir
  GEOWEBCACHE_CACHE_DIR:
    value: '/mnt/cache'
  JAVA_OPTS_DEFAULT:
    value: '-DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80'
  JAVA_OPTS:
    value: '$(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml'
    order: 1

additional-stuff: &additional-stuff
  volumes:
    <<: *additional-volumes
  containers:
    spring:
      env:
        <<: *env-override
      volumeMounts:
        <<: *additional-volume-mounts

service: &common-service-definition
  type: ClusterIP
  servicePort: 8090
  ports:
    - name: http
      port: 8090
      protocol: TCP
      targetPort: http

geoservercloud:
  global:
    profile: standalone,datadir
    image:
      pullPolicy: IfNotPresent
  geoserver:
    ingress:
      annotations: {}
      enabled: true
      hostGroups:
        host1:
          tls:
            enabled: false
          hosts:
            - localhost
    services:
      gateway:
        service:
          annotations: {}
          labels: {}
          <<: *common-service-definition

        ingress:
          enabled: true
        <<: *additional-stuff
      webui:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
      rest:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
      wms:
        replicaCount: 2
        <<: *additional-stuff
        service:
          <<: *common-service-definition
      wcs:
        <<: *additional-stuff
        service:
          <<: *common-service-definition
      wfs:
        replicaCount: 2
        <<: *additional-stuff
        service:
          <<: *common-service-definition
      gwc:
        replicaCount: 2
        <<: *additional-stuff
        service:
          <<: *common-service-definition

storageClass:
  provisioner: ''
  enabled: false
  storageClassName: ''
  annotations: {}
  reclaimPolicy: ''
  volumeBindingMode: ''
  allowVolumeExpansion: true
  parameters: {}
